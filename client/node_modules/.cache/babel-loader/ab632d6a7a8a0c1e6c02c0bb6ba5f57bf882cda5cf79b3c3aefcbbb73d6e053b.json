{"ast":null,"code":"import axios from 'axios';\nexport const CHANGE_PASSWORD_SUCCESS = 'CHANGE_PASSWORD_SUCCESS';\nexport const CHANGE_PASSWORD_FAIL = 'CHANGE_PASSWORD_FAIL';\nexport const changePassword = (email, oldPassword, newPassword) => async dispatch => {\n  try {\n    await axios.post('http://localhost:3000/api/users/change-password', {\n      email,\n      oldPassword,\n      newPassword\n    });\n    dispatch({\n      type: CHANGE_PASSWORD_SUCCESS\n    });\n    return Promise.resolve(); // Indica que la acción fue exitosa\n  } catch (error) {\n    var _error$response, _error$response$data, _error$response2, _error$response2$data;\n    dispatch({\n      type: CHANGE_PASSWORD_FAIL,\n      payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Unknown error'\n    });\n    return Promise.reject(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Unknown error'); // Indica que la acción falló\n  }\n};","map":{"version":3,"names":["axios","CHANGE_PASSWORD_SUCCESS","CHANGE_PASSWORD_FAIL","changePassword","email","oldPassword","newPassword","dispatch","post","type","Promise","resolve","error","_error$response","_error$response$data","_error$response2","_error$response2$data","payload","response","data","reject"],"sources":["C:/Users/asus/OneDrive/Escritorio/luana/MagicalWords/client/src/redux/actions/userActions.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const CHANGE_PASSWORD_SUCCESS = 'CHANGE_PASSWORD_SUCCESS';\r\nexport const CHANGE_PASSWORD_FAIL = 'CHANGE_PASSWORD_FAIL';\r\n\r\nexport const changePassword = (email, oldPassword, newPassword) => async (dispatch) => {\r\n  try {\r\n    await axios.post('http://localhost:3000/api/users/change-password', { email, oldPassword, newPassword });\r\n    dispatch({ type: CHANGE_PASSWORD_SUCCESS });\r\n    return Promise.resolve();  // Indica que la acción fue exitosa\r\n  } catch (error) {\r\n    dispatch({ type: CHANGE_PASSWORD_FAIL, payload: error.response?.data?.error || 'Unknown error' });\r\n    return Promise.reject(error.response?.data?.error || 'Unknown error');  // Indica que la acción falló\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,uBAAuB,GAAG,yBAAyB;AAChE,OAAO,MAAMC,oBAAoB,GAAG,sBAAsB;AAE1D,OAAO,MAAMC,cAAc,GAAGA,CAACC,KAAK,EAAEC,WAAW,EAAEC,WAAW,KAAK,MAAOC,QAAQ,IAAK;EACrF,IAAI;IACF,MAAMP,KAAK,CAACQ,IAAI,CAAC,iDAAiD,EAAE;MAAEJ,KAAK;MAAEC,WAAW;MAAEC;IAAY,CAAC,CAAC;IACxGC,QAAQ,CAAC;MAAEE,IAAI,EAAER;IAAwB,CAAC,CAAC;IAC3C,OAAOS,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC,CAAE;EAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA,EAAAC,gBAAA,EAAAC,qBAAA;IACdT,QAAQ,CAAC;MAAEE,IAAI,EAAEP,oBAAoB;MAAEe,OAAO,EAAE,EAAAJ,eAAA,GAAAD,KAAK,CAACM,QAAQ,cAAAL,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBM,IAAI,cAAAL,oBAAA,uBAApBA,oBAAA,CAAsBF,KAAK,KAAI;IAAgB,CAAC,CAAC;IACjG,OAAOF,OAAO,CAACU,MAAM,CAAC,EAAAL,gBAAA,GAAAH,KAAK,CAACM,QAAQ,cAAAH,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBI,IAAI,cAAAH,qBAAA,uBAApBA,qBAAA,CAAsBJ,KAAK,KAAI,eAAe,CAAC,CAAC,CAAE;EAC1E;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}