{"ast":null,"code":"import axios from 'axios';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\nexport const login = (email, password) => async dispatch => {\n  try {\n    const res = await axios.post('http://localhost:3000/api/auth/login', {\n      email,\n      password\n    });\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data.token\n    });\n    return Promise.resolve(); // Indica que la acción fue exitosa\n  } catch (error) {\n    var _error$response, _error$response$data, _error$response2, _error$response2$data;\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Unknown error'\n    });\n    return Promise.reject(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Unknown error'); // Indica que la acción falló\n  }\n};\nexport const register = (email, password) => async dispatch => {\n  try {\n    await axios.post('http://localhost:3000/api/auth/register', {\n      email,\n      password\n    });\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    return Promise.resolve(); // Indica que la acción fue exitosa\n  } catch (error) {\n    var _error$response3, _error$response3$data, _error$response4, _error$response4$data;\n    dispatch({\n      type: REGISTER_FAIL,\n      payload: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Unknown error'\n    });\n    return Promise.reject(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Unknown error'); // Indica que la acción falló\n  }\n};","map":{"version":3,"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_SUCCESS","REGISTER_FAIL","login","email","password","dispatch","res","post","type","payload","data","token","Promise","resolve","error","_error$response","_error$response$data","_error$response2","_error$response2$data","response","reject","register","_error$response3","_error$response3$data","_error$response4","_error$response4$data"],"sources":["C:/Users/asus/OneDrive/Escritorio/luana/MagicalWords/client/src/redux/actions/authActions.js"],"sourcesContent":["\r\nimport axios from 'axios';\r\n\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        const res = await axios.post('http://localhost:3000/api/auth/login', { email, password });\r\n        dispatch({ type: LOGIN_SUCCESS, payload: res.data.token });\r\n        return Promise.resolve();  // Indica que la acción fue exitosa\r\n    } catch (error) {\r\n        dispatch({ type: LOGIN_FAIL, payload: error.response?.data?.error || 'Unknown error' });\r\n        return Promise.reject(error.response?.data?.error || 'Unknown error');  // Indica que la acción falló\r\n    }\r\n};\r\n\r\nexport const register = (email, password) => async (dispatch) => {\r\n    try {\r\n        await axios.post('http://localhost:3000/api/auth/register', { email, password });\r\n        dispatch({ type: REGISTER_SUCCESS });\r\n        return Promise.resolve();  // Indica que la acción fue exitosa\r\n    } catch (error) {\r\n        dispatch({ type: REGISTER_FAIL, payload: error.response?.data?.error || 'Unknown error' });\r\n        return Promise.reject(error.response?.data?.error || 'Unknown error');  // Indica que la acción falló\r\n    }\r\n};"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,UAAU,GAAG,YAAY;AACtC,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,aAAa,GAAG,eAAe;AAE5C,OAAO,MAAMC,KAAK,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EAC1D,IAAI;IACA,MAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,sCAAsC,EAAE;MAAEJ,KAAK;MAAEC;IAAS,CAAC,CAAC;IACzFC,QAAQ,CAAC;MAAEG,IAAI,EAAEV,aAAa;MAAEW,OAAO,EAAEH,GAAG,CAACI,IAAI,CAACC;IAAM,CAAC,CAAC;IAC1D,OAAOC,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC,CAAE;EAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA,EAAAC,gBAAA,EAAAC,qBAAA;IACZb,QAAQ,CAAC;MAAEG,IAAI,EAAET,UAAU;MAAEU,OAAO,EAAE,EAAAM,eAAA,GAAAD,KAAK,CAACK,QAAQ,cAAAJ,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBL,IAAI,cAAAM,oBAAA,uBAApBA,oBAAA,CAAsBF,KAAK,KAAI;IAAgB,CAAC,CAAC;IACvF,OAAOF,OAAO,CAACQ,MAAM,CAAC,EAAAH,gBAAA,GAAAH,KAAK,CAACK,QAAQ,cAAAF,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBP,IAAI,cAAAQ,qBAAA,uBAApBA,qBAAA,CAAsBJ,KAAK,KAAI,eAAe,CAAC,CAAC,CAAE;EAC5E;AACJ,CAAC;AAED,OAAO,MAAMO,QAAQ,GAAGA,CAAClB,KAAK,EAAEC,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EAC7D,IAAI;IACA,MAAMR,KAAK,CAACU,IAAI,CAAC,yCAAyC,EAAE;MAAEJ,KAAK;MAAEC;IAAS,CAAC,CAAC;IAChFC,QAAQ,CAAC;MAAEG,IAAI,EAAER;IAAiB,CAAC,CAAC;IACpC,OAAOY,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC,CAAE;EAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAQ,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,qBAAA;IACZpB,QAAQ,CAAC;MAAEG,IAAI,EAAEP,aAAa;MAAEQ,OAAO,EAAE,EAAAa,gBAAA,GAAAR,KAAK,CAACK,QAAQ,cAAAG,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBZ,IAAI,cAAAa,qBAAA,uBAApBA,qBAAA,CAAsBT,KAAK,KAAI;IAAgB,CAAC,CAAC;IAC1F,OAAOF,OAAO,CAACQ,MAAM,CAAC,EAAAI,gBAAA,GAAAV,KAAK,CAACK,QAAQ,cAAAK,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBd,IAAI,cAAAe,qBAAA,uBAApBA,qBAAA,CAAsBX,KAAK,KAAI,eAAe,CAAC,CAAC,CAAE;EAC5E;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}