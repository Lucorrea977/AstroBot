{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport chatService from '../../services/chatService';\nconst initialState = {\n  messages: [],\n  isLoading: false,\n  error: null\n};\nexport const getMessages = createAsyncThunk('chat/getMessages', async () => {\n  try {\n    const messages = await chatService.getMessages();\n    return messages;\n  } catch (error) {\n    throw new Error('Error fetching messages');\n  }\n});\nexport const sendMessage = createAsyncThunk('chat/sendMessage', async message => {\n  try {\n    const response = await chatService.sendMessage(message);\n    // response should contain both userMessage and botMessage\n    return response;\n  } catch (error) {\n    throw new Error('Error sending message');\n  }\n});\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getMessages.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(getMessages.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.messages = action.payload;\n    }).addCase(getMessages.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error.message;\n    }).addCase(sendMessage.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(sendMessage.fulfilled, (state, action) => {\n      state.isLoading = false;\n      // Assuming action.payload contains { userMessage, botMessage }\n      state.messages.push(action.payload.userMessage);\n      state.messages.push(action.payload.botMessage);\n    }).addCase(sendMessage.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error.message;\n    });\n  }\n});\nexport default chatSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","chatService","initialState","messages","isLoading","error","getMessages","Error","sendMessage","message","response","chatSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","push","userMessage","botMessage","reducer"],"sources":["C:/Users/asus/OneDrive/Escritorio/luana/AstroBot/client/src/redux/reducer/chatSlice.js"],"sourcesContent":["\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport chatService from '../../services/chatService';\r\n\r\nconst initialState = {\r\n  messages: [],\r\n  isLoading: false,\r\n  error: null,\r\n};\r\n\r\nexport const getMessages = createAsyncThunk('chat/getMessages', async () => {\r\n  try {\r\n    const messages = await chatService.getMessages();\r\n    return messages;\r\n  } catch (error) {\r\n    throw new Error('Error fetching messages');\r\n  }\r\n});\r\n\r\nexport const sendMessage = createAsyncThunk('chat/sendMessage', async (message) => {\r\n  try {\r\n    const response = await chatService.sendMessage(message);\r\n    // response should contain both userMessage and botMessage\r\n    return response;\r\n  } catch (error) {\r\n    throw new Error('Error sending message');\r\n  }\r\n});\r\n\r\nconst chatSlice = createSlice({\r\n  name: 'chat',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getMessages.pending, (state) => {\r\n        state.isLoading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(getMessages.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.messages = action.payload;\r\n      })\r\n      .addCase(getMessages.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.error = action.error.message;\r\n      })\r\n      .addCase(sendMessage.pending, (state) => {\r\n        state.isLoading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(sendMessage.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        // Assuming action.payload contains { userMessage, botMessage }\r\n        state.messages.push(action.payload.userMessage);\r\n        state.messages.push(action.payload.botMessage);\r\n      })\r\n      .addCase(sendMessage.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default chatSlice.reducer;\r\n"],"mappings":"AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,WAAW,MAAM,4BAA4B;AAEpD,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGN,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EAC1E,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMF,WAAW,CAACK,WAAW,CAAC,CAAC;IAChD,OAAOH,QAAQ;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;EAC5C;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAGR,gBAAgB,CAAC,kBAAkB,EAAE,MAAOS,OAAO,IAAK;EACjF,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMT,WAAW,CAACO,WAAW,CAACC,OAAO,CAAC;IACvD;IACA,OAAOC,QAAQ;EACjB,CAAC,CAAC,OAAOL,KAAK,EAAE;IACd,MAAM,IAAIE,KAAK,CAAC,uBAAuB,CAAC;EAC1C;AACF,CAAC,CAAC;AAEF,MAAMI,SAAS,GAAGZ,WAAW,CAAC;EAC5Ba,IAAI,EAAE,MAAM;EACZV,YAAY;EACZW,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACV,WAAW,CAACW,OAAO,EAAGC,KAAK,IAAK;MACvCA,KAAK,CAACd,SAAS,GAAG,IAAI;MACtBc,KAAK,CAACb,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDW,OAAO,CAACV,WAAW,CAACa,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACjDF,KAAK,CAACd,SAAS,GAAG,KAAK;MACvBc,KAAK,CAACf,QAAQ,GAAGiB,MAAM,CAACC,OAAO;IACjC,CAAC,CAAC,CACDL,OAAO,CAACV,WAAW,CAACgB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACd,SAAS,GAAG,KAAK;MACvBc,KAAK,CAACb,KAAK,GAAGe,MAAM,CAACf,KAAK,CAACI,OAAO;IACpC,CAAC,CAAC,CACDO,OAAO,CAACR,WAAW,CAACS,OAAO,EAAGC,KAAK,IAAK;MACvCA,KAAK,CAACd,SAAS,GAAG,IAAI;MACtBc,KAAK,CAACb,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDW,OAAO,CAACR,WAAW,CAACW,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACjDF,KAAK,CAACd,SAAS,GAAG,KAAK;MACvB;MACAc,KAAK,CAACf,QAAQ,CAACoB,IAAI,CAACH,MAAM,CAACC,OAAO,CAACG,WAAW,CAAC;MAC/CN,KAAK,CAACf,QAAQ,CAACoB,IAAI,CAACH,MAAM,CAACC,OAAO,CAACI,UAAU,CAAC;IAChD,CAAC,CAAC,CACDT,OAAO,CAACR,WAAW,CAACc,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACd,SAAS,GAAG,KAAK;MACvBc,KAAK,CAACb,KAAK,GAAGe,MAAM,CAACf,KAAK,CAACI,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeE,SAAS,CAACe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}